<?php namespace Rest\Controllers;/** * Created by PhpStorm. * User: rjgun * Date: 10/04/2016 * Time: 19:24 */use Jacwright\RestServer\RestException;use Rest\Functions;use Rest\Controllers\DefaultController;use \PDOException;class BookingsController extends DefaultController{    /**     * Get Bookings     *     * @url GET /$id     * @param string $id     * @return     * @throws RestException     */    public function getData($id = null)    {        if (!isset($id)) {            throw new RestException(204, 'No Content');        }        $this->db->query('SELECT * FROM bookings WHERE eventid = :id');        $this->db->bind(':id', $id);        try {            $results = $this->db->resultset();        } catch (PDOException $e) {            throw new RestException(404, 'Not Found');        }        return $results;    }    /**     * Adds booking     *     * @url POST /     * @url POST /$id     */    public function addBooking($id,$data)    {    if(isset($data->eventid)){$id=Functions\test_input($data->eventid);}        if (!isset($id)) {            throw new RestException(404, 'eventid required');        }        if (!isset($data->bookings) || !is_array($data->bookings)) {            throw new RestException(404, 'Bookings array required');        }        $this->db->beginTransaction();        $error=false;        $n_bookings=0;        $event=array();        $allBookings=array();        //define who made the cut        if(!$error)        {            $this->db->query('SELECT * FROM eventsList WHERE id=:id');            $this->db->bind(':id',$id);            try {                $event = $this->db->single();            } catch (PDOException $e) {                $error=true;                print("error getting event");            }        }        if(!$error)        {            $this->db->query('SELECT * FROM bookings WHERE eventid=:id AND booker=:crsid AND admin=0');            $this->db->bind(':id',$id);            $this->db->bind(':crsid',$this->user);            try {                $allBookings = $this->db->resultset();                $n_bookings = $this->db->rowCount();            } catch (PDOException $e) {                $error=true;                print("error getting event");            }        }        if(!$error && $event['closeDate']<gmdate('Y-m-d H:i:s'))        {            //eventClosed            throw new RestException(404, 'Event Closed, Cannot make booking');        }        if(!$error && $event['openDate']>gmdate('Y-m-d H:i:s') && (!$this->admin ||  ($this->admin && !$data->admin)))        {            // Open Date is in future and not admin or admin, but not admin booking            throw new RestException(404, 'Event Not Yet Open, Cannot make booking');        }        foreach ($data->bookings as $booking)        {            if(!$error)            {                $this->db->query('INSERT INTO bookings (eventid,booker,admin,type,name,diet,other,extra)                                   VALUES (:eid, :crsid, :admin, :type, :name, :diet, :other, :extra)');                $this->db->bind(':eid', $id);                $this->db->bind(':crsid', $this->user); //TODO: allow admin to book for others?                if(($this->admin && !$data->admin))                {                    $this->db->bind(':admin', 1);                    $this->db->bind(':type',Functions\test_input($data->type));                }                else                {                    $this->db->bind(':admin', 0);                    if($n_bookings==0)                    {                        $this->db->bind(':type',1);                    }                    else if($n_bookings>$event['maxGuests'])                    {                        //Too Many bookings                        $error=true;                        break;                    }                    else                    {                        $this->db->bind(':type',0);                    }                    $n_bookings++;                }                $this->db->bind(':name',Functions\test_input($data->name));                $this->db->bind(':diet',Functions\test_input($data->diet));                $this->db->bind(':other',Functions\test_input($data->other));                $this->db->bind(':extra',Functions\test_input($data->extra));                try {                    $this->db->execute();                } catch (PDOException $e) {                    $error=true;                    print("error making booking");                }            }        }        if ($error) {            $this->db->cancelTransaction();            throw new RestException(409, 'Transaction Error');        } else {            $this->db->endTransaction();        }        return;    }    /**     * update the booking     *     * @url PUT /     * @url PUT /$id     * @param string $id     * @param array $data set (phone and/or name) or (admin and/or authorised)     * @throws RestException     */    public function updateBooking($id = null, $data)    {        if (!($this->admin && $id)) {            $id = $this->user;        }        if ($this->admin && $id != $this->user) {            // Updating permissions            if (isset($data->admin) && isset($data->authorised)) {                $this->db->query('UPDATE user SET authorised=:authorised, admin=:admin  WHERE crsid=:id;');                $this->db->bind(':authorised', test_input($data->authorised));                $this->db->bind(':admin', test_input($data->admin));            } elseif (isset($data->admin)) {                $this->db->query('UPDATE user SET admin=:admin  WHERE crsid=:id;');                $this->db->bind(':admin', test_input($data->admin));            } elseif (isset($data->authorised)) {                $this->db->query('UPDATE user SET authorised=:authorised  WHERE crsid=:id;');                $this->db->bind(':authorised', test_input($data->authorised));            } else {                throw new RestException(204, 'No Content');            }        } else {            // Updating Name or Mobile            if ($data->name && $data->phone) {                $this->db->query('UPDATE user SET name=:name, phone=:phone  WHERE crsid=:id;');                $this->db->bind(':name', test_input($data->name));                $this->db->bind(':phone', test_input($data->phone));            } elseif ($data->name) {                $this->db->query('UPDATE user SET name=:name  WHERE crsid=:id;');                $this->db->bind(':name', test_input($data->name));            } elseif ($data->phone) {                $this->db->query('UPDATE user SET phone=:phone  WHERE crsid=:id;');                $this->db->bind(':phone', test_input($data->phone));            } else {                throw new RestException(204, 'No Content');            }        }        $this->db->bind(':id', $id);        $this->db->execute();        $this->db->query('SELECT * FROM user WHERE crsid = :id');        $this->db->bind(':id', $id);        $row = $this->db->single();        return $row;    }    /**     * Delete the user by id or current user     *     * @url DELETE /$id     */    public function deleteBooking($id = '*', $type = null)    {        if (!$this->admin) {            throw new RestException(404, 'User Must be admin to modify Users');        }        if (!isset($id)) {            throw new RestException(204, 'No Content');        }        $error=false;        $this->db->query('DELETE FROM bookings WHERE crsid=:crsid');        $this->db->bind(':crsid', $id);        try {            $this->db->execute();        } catch (PDOException $e) {            $error = true;        }        if ($error) {            throw new RestException(404, 'Not Found');        }        return;    }}